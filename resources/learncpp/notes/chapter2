--------------------------------------------------------------------------------
2.1 : Intro to functions
--------------------------------------------------------------------------------

Functions can be called from other functions.
If a function calls on another function, the original function is called the 
caller.


Function Structure
"""
    return-type identifier(){
        //insert code here
    }
"""

cpp does not support nested functions!








--------------------------------------------------------------------------------
2.2 : Function return values
--------------------------------------------------------------------------------
/// Best Practice

    Main should always return 0,
    if main returns 0 then the program ran normally
///

*** Advanced

    If you use the  'cstdlib' library, you can return different types of status 
    codes as ints.

    0, EXIT_SUCCESS
    EXIT_FAILURE
***

Additionally, you cannot explicitly call the main function.

/// Best Practice

    Always explicitly provide a return value for any function that has a 
    non-void return type.

    If you dont return a value when it expects one (other than main), you'll get 
    undefined behaviour.
///

/// Best Practice

    If you find yourself writing repetitive code, you should throw it into a 
    function.
///

Additionally, you can use returned values from functions to init variables.
eg)

    int getValueFromUser(){...}

    int x{ getValueFromUser() };

When you call a function, and use it's return value in an expression, you will 
only get the return value for that expression.

eg) See ch2.cpp 








--------------------------------------------------------------------------------
2.3 : Intro to function parameters and arguments
--------------------------------------------------------------------------------
Parameters are defined within the function identifier.

eg)

    void identifier(int parameter){ ... }

Additionally, arguements are passed from the caller to the function when a 
function call is made.

eg2) see ch2.main2_3()

 ****************************************************************************** 
********************************************************************************
WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING 
********************************************************************************
C++ does not define whether function calls evaluate arguments left to right or 
right to left. 

DO NOT MAKE FUNCTION CALLS WHERE ARGUMENT ORDER MATTERS

eg) 
    // a() or b() may be called first.
    someFunction(a(),b());

sol)
    // This guarantees that a() is called before b()
    
    int aVar{ a() };
    int bVar{ b() };

    someFunction(aVar,bVar);

********************************************************************************
WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING 
********************************************************************************
 ****************************************************************************** 








--------------------------------------------------------------------------------
2.4 : Intro to local scope
--------------------------------------------------------------------------------

Local Variables:
    Function parameters and variables defined inside the function body are 
    called local variables.

    Additionally, it should be noted that the scope of local variables within 
    functions only exist within the function. Therefore, they cannot be called
    from outside functions.

Local Variable LifeTime:
    Once a local variable is instantiated, they are destroyed once the function
    is finished running.

    Local variables are destroyed in the opposite order of creation. 

    The lifetime of the variable is measured between the birth and death of the 
    variable. 

Functional Seperation:

Names used for function parameters or variables declared in a function body are 
only visible within the function that declares them. This means local variables
within a function can be named without regard for the names of variables in 
other functions. This helps keep functions independent.

/// Best Practice  

    Define your local variables as close to their first use as reasonable.
///






--------------------------------------------------------------------------------
2.5 : Why functions are useful and how to use them effectively.
--------------------------------------------------------------------------------

Organization
Reusability
Testing
Extensibility
Abstraction

/// Best Practices:

    Statements that apear more than once in a program should generally be made 
    into a function.

    Code that has a well-defined set of inputs and outputs is a good candidate 
    for a function, particularly if it is complicated. 

    A function should generally perform one (and only one ) task

    Refactoring:
        When a function becomes too long, too complicated or hard to understand.
        These function should be split into multiple sub-functions.

///






--------------------------------------------------------------------------------
2.6 : Forward Declarations and Definitions
--------------------------------------------------------------------------------

When CPP compiles code, it will always compile code sequentially. Therefore...

/// Best Practice

    When addressing compile errors in your program, always resolve the first 
    error then compile again.
///

However sometimes functions will call on each other in a way such that it's
impossible to order the functions sequentially. 

As a result, we can use something called...

Function Prototyping.

    We can declare a function before it's actual implementation to allow the 
    compiler to know of it's existence. 

    This is called a declaration.

    eg) 
        see ch2.main2_6()

Definition:
    Actually implements (for functions or types) or instantiates (for variables)
    the identifier.

    eg)
        // Statement Definition
        int add(int x, int y){

            // Variable Definition
            int z{x + y};
            
            return z;
        }

THE ONE DEFINITION RULE (ODR):
    - Contains 3 parts:
        1.  Within a given file, a function, object, type or template can have 
            only one definition.
        
        2.  Within a given program, an object or normal function can only have 
            one definition. This distinction is made because programs can have 
            more than one file. 

        3.  Types, templates, inline functions, and variables are allowed to 
            have identical definitions in different files.

Declaration:
    a statement that tells the compiler about the existence of an identifier and
    it's type information.






--------------------------------------------------------------------------------
2.7 : Programs with multiple code files
--------------------------------------------------------------------------------
When you add new code files to your project give them a cpp extension.

Remember to modify the make file, maybe we'll get into object linking after 
compilation at some point.

When compiling multi-file program, it can compile the files in any order. 
Additionally it compiles each file individually with no knowledge of other files
. If you a file needs to see another function from another file, be sure to 
declare the function in the original file.







--------------------------------------------------------------------------------
2.8: Naming collisions and an introduction to namespaces
--------------------------------------------------------------------------------

If two identical identifiers are introduced into the same program in a way that 
the compiler or linker can't tell them apart, the compiler or linker will 
produce an error.

The error that results is a naming collision/ conflict

We can avoid having collisions using NAMESPACES

Within a namespace, you can declare names for the purpose of disambiguation.
The namespace provides a scope to the names declared in it.

A name declared in a namespace won't be mistaken for an identical name declared
in another scope.

However, within the namespace, the names of identifiers must be unique.


The Global Namespace:
    Any name that is not defined inside a class, function or a namespace is 
    considered to be part of an implicitly defined namespace called the Global
    namespace. (global scope).

    So be careful about making things public.


You can call identifiers from their namespace using this notation.

    std::cout << "hello world!";

where std is the namespace that contains the function cout.


Using Namespace std (and why to avoid it):
    
    You can import namespaces with..
        using namespace namespaceName;
    
    We want to avoid using namespaces in case we create a local function that 
    has the same name as a function from a namespace we're using.    


!!! Question !!! 
    How do WE make namespaces?






================================================================================
2.9: Introduction to the Preprocessor
================================================================================
Before code is compiled, it goes through a phase called translation. If a code 
file with translations applied to it is called a translation unit.


The Preprocessor:
    The preprocessor is best thought of as a separate program that manipulates
    the text in each code file.

    The preprocessor looks for 

    Preprocessor Directives:
        Often just called directives. 
        They start with a # symbol and end with a newline instead of a semicolon

        These directives are used to perform specific text manipulation tasks.


#include <file> [imports?]
    this directive is replaced by the contents of the included file. It will 
    specifically replace #include with the preprocessed contents of the file 
    named.


#define VAR_NAME [Object like macros]
    These object-like macros WERE used as an alternative to constant variables.
    These are like garbage constants and are a legacy thing.

    HOWEVER, we can use them remove all identifiers of that name, 
    if we use #define VAR_NAME then all identifiers of VAR_NAME will be removed
    from the file. 


#ifdef , #ifndef , #endif
    We can use this to prevent code from being compiled by defining object-like 
    Macros. 

    eg) Check 2_9

    #define VAR_NAME 
    won't remove other preprocessor directives. 

    Additionally, the scope of the directive is limited to the file it is 
    defined in this is due to compiling separate files and then linking them 
    together.





