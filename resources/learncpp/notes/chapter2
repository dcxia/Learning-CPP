--------------------------------------------------------------------------------
2.1 : Intro to functions
--------------------------------------------------------------------------------

Functions can be called from other functions.
If a function calls on another function, the original function is called the 
caller.


Function Structure
"""
    return-type identifier(){
        //insert code here
    }
"""

cpp does not support nested functions!








--------------------------------------------------------------------------------
2.2 : Function return values
--------------------------------------------------------------------------------
/// Best Practice

    Main should always return 0,
    if main returns 0 then the program ran normally
///

*** Advanced

    If you use the  'cstdlib' library, you can return different types of status 
    codes as ints.

    0, EXIT_SUCCESS
    EXIT_FAILURE
***

Additionally, you cannot explicitly call the main function.

/// Best Practice

    Always explicitly provide a return value for any function that has a 
    non-void return type.

    If you dont return a value when it expects one (other than main), you'll get 
    undefined behaviour.
///

/// Best Practice

    If you find yourself writing repetitive code, you should throw it into a 
    function.
///

Additionally, you can use returned values from functions to init variables.
eg)

    int getValueFromUser(){...}

    int x{ getValueFromUser() };

When you call a function, and use it's return value in an expression, you will 
only get the return value for that expression.

eg) See ch2.cpp 








--------------------------------------------------------------------------------
2.3 : Intro to function parameters and arguments
--------------------------------------------------------------------------------
Parameters are defined within the function identifier.

eg)

    void identifier(int parameter){ ... }

Additionally, arguements are passed from the caller to the function when a 
function call is made.

eg2) see ch2.main2_3()

 ****************************************************************************** 
********************************************************************************
WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING 
********************************************************************************
C++ does not define whether function calls evaluate arguments left to right or 
right to left. 

DO NOT MAKE FUNCTION CALLS WHERE ARGUMENT ORDER MATTERS

eg) 
    // a() or b() may be called first.
    someFunction(a(),b());

sol)
    // This guarantees that a() is called before b()
    
    int aVar{ a() };
    int bVar{ b() };

    someFunction(aVar,bVar);

********************************************************************************
WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING 
********************************************************************************
 ****************************************************************************** 








--------------------------------------------------------------------------------
2.4 : Intro to local scope
--------------------------------------------------------------------------------

